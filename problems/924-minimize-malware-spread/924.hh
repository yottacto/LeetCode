#pragma once
#include <algorithm>
#include <vector>
#include <numeric>
#include <unordered_map>
#include <unordered_set>

auto constexpr maxn = 307;

struct Solution
{
    int n;
    std::vector<int> parent;
    std::vector<int> size;
    std::vector<int> virus_count;

    int get_parent(int x)
    {
        return x == parent[x]
            ? x
            : parent[x] = get_parent(parent[x]);
    }

    void set_union(int x, int y)
    {
        auto tx = get_parent(x);
        auto ty = get_parent(y);
        if (tx != ty) {
            parent[tx] = ty;
            size[ty] += size[tx];
            virus_count[ty] += virus_count[tx];
        }
    }

    int minMalwareSpread(std::vector<std::vector<int>>& g, std::vector<int>& init)
    {
        n = g.size();
        parent.resize(n);
        size.resize(n, 1);
        virus_count.resize(n, 0);
        std::iota(parent.begin(), parent.end(), 0);
        auto res = init[0];
        for (auto i : init) {
            virus_count[i] = 1;
            res = std::min(res, i);
        }

        for (auto i = 0; i < n; i++) {
            for (auto j = i + 1; j < n; j++) {
                if (!g[i][j]) continue;
                set_union(i, j);
            }
        }

        auto max = 0;
        for (auto i : init) {
            auto id = get_parent(i);
            if (virus_count[id] != 1)
                continue;
            if (size[id] > max) {
                max = size[id];
                res = i;
            } else if (size[id] == max) {
                res = std::min(res, i);
            }
        }
        return res;
    }
};

