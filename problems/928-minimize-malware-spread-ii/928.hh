#pragma once
#include <algorithm>
#include <vector>
#include <numeric>
#include <unordered_map>
#include <unordered_set>

auto constexpr maxn = 307;

struct Solution
{
    int n;
    std::vector<int> parent;
    std::vector<int> size;
    bool virus[maxn] = {};

    int get_parent(int x)
    {
        return x == parent[x]
            ? x
            : parent[x] = get_parent(parent[x]);
    }

    void set_union(int x, int y)
    {
        auto tx = get_parent(x);
        auto ty = get_parent(y);
        if (tx != ty) {
            parent[tx] = ty;
            size[ty] += size[tx];
        }
    }

    int minMalwareSpread(std::vector<std::vector<int>>& g, std::vector<int>& init)
    {
        n = g.size();
        parent.resize(n);
        size.resize(n, 1);
        std::iota(parent.begin(), parent.end(), 0);
        for (auto i : init)
            virus[i] = true;

        for (auto i = 0; i < n; i++) {
            if (virus[i]) continue;
            for (auto j = i + 1; j < n; j++) {
                if (virus[j] || !g[i][j]) continue;
                set_union(i, j);
            }
        }

        std::unordered_map<int, int> count;
        std::unordered_map<int, int> vid;
        for (auto i : init) {
            std::unordered_set<int> ids;
            for (auto j = 0; j < n; j++) {
                if (virus[j] || !g[i][j]) continue;
                ids.insert(get_parent(j));
            }
            for (auto id : ids) {
                count[id]++;
                if (!vid.count(id))
                    vid[id] = i;
                else
                    vid[id] = std::min(vid[id], i);
            }
        }

        std::unordered_map<int, int> reduced_size;
        for (auto i : init)
            reduced_size[i] = 1;
        for (auto const& p : count) {
            if (p.second != 1) continue;
            reduced_size[vid[p.first]] += size[p.first];
        }

        auto max = 0;
        auto res = 0;
        for (auto const& p : reduced_size)
            if (p.second > max) {
                max = p.second;
                res = p.first;
            } else if (p.second == max) {
                res = std::min(res, p.first);
            }
        return res;
    }
};

